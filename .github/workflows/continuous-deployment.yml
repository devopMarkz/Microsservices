name: Microservices Continuous Deployment with Github Actions  # Nome do workflow no GitHub Actions

on:
  push:
    branches:
      - "main"  # O workflow é acionado sempre que há um push para a branch "main"

jobs:
  build-and-push:  # Nome do job
    runs-on: ubuntu-latest  # O job será executado no ambiente Ubuntu mais recente

    steps:
      # Passo 1: Checkout do código
      - uses: actions/checkout@v4  # Faz o checkout do código fonte do repositório, para que o workflow tenha acesso aos arquivos

      # Passo 2: Login no Docker Hub
      - name: Login to Docker Hub  # Realiza o login no Docker Hub usando a ação oficial
        uses: docker/login-action@v3  # Ação oficial do Docker para login
        with:
          username: ${{ secrets.DOCKER_USERNAME }}  # Obtém o nome de usuário do Docker Hub armazenado no GitHub Secrets
          password: ${{ secrets.DOCKER_ACCESS_TOKEN }}  # Obtém o token de acesso do Docker Hub armazenado no GitHub Secrets

      # Passo 3: Configuração do Java (se necessário para algum dos microsserviços)
      - name: Setup Java 21  # Define a versão do Java para usar, caso algum dos microsserviços precise
        uses: actions/setup-java@v4  # Ação oficial para configurar o Java
        with:
          distribution: 'adopt'  # Define a distribuição do Java como "adoptopenjdk"
          java-version: '21'  # Define a versão do Java como 21

      # Passo 4: Gerar a tag personalizada com base no hash do commit
      - name: Set Docker tag (latest + short SHA)  # Definir uma tag personalizada para a imagem (usando o SHA do commit)
        id: vars  # Dá um ID para este passo, permitindo que possamos acessar as variáveis que definimos
        run: |
          echo "TAG=$(echo $GITHUB_SHA | cut -c1-7)" >> $GITHUB_ENV

      # Passo 5: Construção das imagens Docker para todos os microsserviços
      - name: Build Docker Images using Docker Compose  # O comando docker-compose irá construir todas as imagens de uma vez
        working-directory: ./Microsservicos ATUALIZADOS  # Define o diretório onde o docker-compose.yml está localizado
        run: docker compose build  # Construa todas as imagens Docker definidas no arquivo docker-compose.yml

      # Passo 6: Enviar as imagens Docker para o Docker Hub
      - name: Tag and Push Docker Images to Docker Hub  # Empurra as imagens para o Docker Hub com as tags certas
        run: |
          docker compose push
